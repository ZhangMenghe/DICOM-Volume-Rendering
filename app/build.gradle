apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'
def arcore_libpath = "${buildDir}/arcore-native"
configurations { natives }
def setVersionName = { ->
    if (project.hasProperty("androidVersionName")) {
        println("Replacing versionName with supplied build parameter: " +
                "$androidVersionName")
        return androidVersionName
    } else {
        return "1.0"
    }
}
android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "helmsley.vr"
        minSdkVersion 26
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17 -frtti -fexceptions -Wno-error=format-security "
                arguments "-DANDROID_STL=c++_static",
                        "-DGLM_DIRECTORY=${project.rootDir}/thirdparty/glm-0.9.9.8/glm",
                        "-DARCORE_LIBPATH=${arcore_libpath}/jni",
                        "-DARCORE_INCLUDE=${project.rootDir}/thirdparty/arcore",
                        "-DOPENCV_DIR=${project.rootDir}/thirdparty/opencv-4.3.0/sdk/native"
            }
        }
        ndk {
            abiFilters "arm64-v8a","x86","armeabi-v7a","x86_64"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main{
            res.srcDirs = [
                'src/main/res/layouts/basics',
                'src/main/res/layouts/dialogs',
                'src/main/res/layouts/activities',
                'src/main/res/layouts/',
                'src/main/res'
            ]
        }
    }
    externalNativeBuild {
        cmake {
            path "../volume-rendering-cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
    compileOptions {
        targetCompatibility = '1.8'
        sourceCompatibility = '1.8'
    }
    lintOptions {
        disable 'GoogleAppIndexingWarning', 'HardcodedText', 'InvalidPackage'
        textReport true
        textOutput "stdout"
    }
    ndkVersion '21.3.6528147'
    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
            }
            proto {
                srcDir 'src/main/proto'
            }
        }
    }
}

//for proto java generation
protobuf {
    protoc { artifact = 'com.google.protobuf:protoc:3.10.0' }
    plugins {
        javalite { artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0" }
        grpc { artifact = 'io.grpc:protoc-gen-grpc-java:1.25.0' // CURRENT_GRPC_VERSION
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                javalite {}
                grpc { // Options added to --grpc_out
                    option 'lite' }
            }
        }
    }
}
dependencies {
    //yaml
    implementation 'com.github.bmoliveira:snake-yaml:v1.18-android'
    // ARCore library
    implementation 'com.google.ar:core:1.19.0'
    natives 'com.google.ar:core:1.19.0'
    //opencv
    implementation project(path: ':opencv')
    //imebra
//    implementation project(':imebrajni')
    //range seekbar
    implementation 'com.yahoo.mobile.client.android.util.rangeseekbar:rangeseekbar-library:0.1.0'
    // You need to build grpc-java to obtain these libraries below.
    implementation 'io.grpc:grpc-okhttp:1.25.0' // CURRENT_GRPC_VERSION
    implementation 'io.grpc:grpc-protobuf-lite:1.25.0' // CURRENT_GRPC_VERSION
    implementation 'io.grpc:grpc-stub:1.25.0' // CURRENT_GRPC_VERSION
    implementation 'javax.annotation:javax.annotation-api:1.2'

    //recycle view and card view
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support:cardview-v7:28.0.0'

    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.android.support:design:28.0.0'
}
// Extracts the shared libraries from aars in the natives configuration.
// This is done so that NDK builds can access these libraries.
task extractNativeLibraries() {
    // Always extract, this insures the native libs are updated if the version changes.
    outputs.upToDateWhen { false }
    doFirst {
        configurations.natives.files.each { f ->
            copy {
                from zipTree(f)
                into arcore_libpath
                include "jni/**/*"
            }
        }
    }
}

tasks.whenTaskAdded {
    task-> if (task.name.contains("external") && !task.name.contains("Clean")) {
        task.dependsOn(extractNativeLibraries)
    }
}
task('downloadImebra', type: Copy) {
    mkdir project.file("libs")
    def f = project.file('libs/imebrajni5-release.aar')
    if (!f.exists()) {
        new URL('https://bitbucket.org/binarno/imebra_git/downloads/imebrajni5-release.aar').withInputStream { i -> f.withOutputStream { it << i } }
    }
}
build.dependsOn downloadImebra

