#version 310 es

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;	// 64 threads

// input Histogram
layout(std430, binding = 0) buffer inHist {
    int hist[];
};
// input Histogram Max Values 
layout(std430, binding = 1) buffer inHistMax {
    uint histMax[];
};
// input the amount of excess pixels 
layout (std430, binding = 2) buffer excessPixels {
    int excess[];
};

uniform uint NUM_BINS;      // number of gray values in the Final Volume 
uniform float clipLimit;	// limit of pixel values
uniform uint minClipValue;  // lower limit for the Clip Value

void main() {

    // figure out the sub block this index belongs to 
    uvec3 indexVec = gl_WorkGroupID.xyz;
    uint dim = uint(65535);
    uint index = indexVec.z*dim*dim + indexVec.y*dim + indexVec.x;
    index = index * uint(64) + gl_GlobalInvocationID.x;
	uint histIndex = index / NUM_BINS;

    // Pass 1 of redistributing the excess pixels 
    uint avgInc =  uint(excess[ histIndex ] / int(NUM_BINS));
    uint clipValue = uint( float( histMax[ histIndex ] ) * clipLimit );
    clipValue = max(minClipValue, clipValue);
	uint upperLimit = clipValue - avgInc ;	// Bins larger than upperLimit set to clipValue

	// if the number in the histogram is too big -> clip the bin
	uint histValue = uint(hist[index]);
	if (histValue > clipValue) {
		hist[ index ] = int(clipValue);
	}
	else {
		// if the value is too large remove from the bin into excess 
		if (histValue > upperLimit) {
			if (avgInc > uint(0)){
				atomicAdd( excess[ histIndex ], -int( histValue - upperLimit));
			}
			hist[ index ] = int(clipValue);
		}
		// otherwise put the excess into the bin
		else {
			if (avgInc > uint(0)){
				atomicAdd( excess[ histIndex ], -int(avgInc));
				atomicAdd( hist[ index ], int(avgInc));
			}
		}
	}
}