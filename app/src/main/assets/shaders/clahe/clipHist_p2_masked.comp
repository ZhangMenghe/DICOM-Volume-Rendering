#version 310 es
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;	// 64 threads

// input Histogram
layout(std430, binding = 0) buffer inHist {
    int hist[];
};
// input Histogram Max Values 
layout(std430, binding = 1) buffer inHistMax {
    uint histMax[];
};
// input the amount of excess pixels 
layout (std430, binding = 2) buffer excessPixels {
    int excess[];
};
// input lower limit for the Clip Value
layout(std430, binding = 3) buffer inClipValue {
    uint minClipValues[];
};
// input the amount of excess pixels 
layout (std430, binding = 4) buffer stepSizeBuffer {
    uint stepSizes[];
};

uniform uint NUM_BINS;      // number of gray values in the Final Volume 
uniform float clipLimit;	// limit of pixel values


void main() {

    // figure out the sub block this index belongs to 
	uint index = gl_GlobalInvocationID.x;
    uint histIndex = index / NUM_BINS;

    // Pass 2 of redistributing the excess pixels 
    uint stepSize =  stepSizes[ histIndex ]; 
    uint clipValue = uint( float( histMax[ histIndex ] ) * clipLimit );
    clipValue = max(minClipValues[ histIndex ], clipValue);

    // get 0...NUM_BINS index
    uint currHistIndex = index % NUM_BINS;

    // add excess to the histogram
    bool add = (currHistIndex % stepSize == uint(0)) && (hist[index] < int(clipValue));

    barrier();

    int prev = atomicAdd(excess[histIndex], -1);
    if (prev == 0) excess[histIndex] = 0;

	atomicAdd(hist[index], (add && prev > 0) ? 1 : 0);

}