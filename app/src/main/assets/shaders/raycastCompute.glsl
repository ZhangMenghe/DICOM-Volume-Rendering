#version 310 es

#pragma multi_compile SHOW_ORGANS
#pragma multi_compile COLOR_GRAYSCALE COLOR_HSV COLOR_BRIGHT COLOR_FIRE COLOR_BMY COLOR_CET_L08 COLOR_CET_L10 COLOR_CET_D7
#pragma multi_compile LIGHT_DIRECTIONAL LIGHT_SPOT LIGHT_POINT
#pragma multi_compile FLIPY

#extension GL_EXT_shader_io_blocks:require
#extension GL_EXT_geometry_shader:require

precision mediump float;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
layout(binding = 0, r32ui)readonly uniform mediump uimage3D srcTex;
layout(binding = 1, rgba8)writeonly uniform mediump image3D destTex;

//Uniforms for texture_baked
struct OpacityAdj{
    float overall;//0-1
    float lowbound; //slope adj, 0-1
    float cutoff;//0,1
};
//shaderd by tex and ray, but mutually exclusive
//uniform OpacityAdj uOpacitys;
uniform vec2 u_opacity[60];
uniform int u_widget_num;

//last bit indicates body(which doesn't belong to organs)
uniform uint u_maskbits;// = uint(31);
uniform uint u_organ_num;// = uint(4);
uniform vec3 u_tex_size;
uniform float u_contrast_low;
uniform float u_contrast_high;
uniform float u_brightness;
uniform int u_visible_bits;
uniform bool u_mask_color;
//uniform float u_contrast_level;
const vec3 ORGAN_COLORS[7]= vec3[7](vec3(0.24, 0.004, 0.64), vec3(0.008, 0.278, 0.99), vec3(0.75, 0.634, 0.996),
                            vec3(1, 0.87, 0.14),vec3(0.98, 0.88, 1.0),vec3(0.99, 0.106, 0.365), vec3(.0, 0.314,0.75));
const int u_color_fire_scheme[256]=int[256](0x000000,0x060000,0x0d0000,0x120000,0x160000,0x190000,0x1c0000,0x1f0000,0x220000,0x240000,0x260000,0x280000,0x2b0000,0x2d0000,0x2e0000,0x300000,0x320000,0x340000,0x350000,0x370000,0x380000,0x3a0000,0x3b0000,0x3d0000,0x3e0000,0x400000,0x410000,0x430000,0x440000,0x460000,0x470000,0x490000,0x4a0000,0x4c0000,0x4d0000,0x4f0000,0x500000,0x520000,0x530000,0x550000,0x560000,0x580000,0x590100,0x5b0100,0x5d0100,0x5e0100,0x600100,0x610100,0x630100,0x650100,0x660100,0x680100,0x690100,0x6b0100,0x6d0100,0x6e0100,0x700100,0x710100,0x730100,0x750100,0x760100,0x780200,0x7a0200,0x7b0200,0x7d0200,0x7f0200,0x800200,0x820200,0x840200,0x850200,0x870200,0x890200,0x8a0200,0x8c0300,0x8e0300,0x900300,0x910300,0x930300,0x950300,0x960300,0x980300,0x9a0300,0x9c0300,0x9d0400,0x9f0400,0xa10400,0xa20400,0xa40400,0xa60400,0xa80400,0xa90400,0xab0500,0xad0500,0xaf0500,0xb00500,0xb20500,0xb40500,0xb60600,0xb80600,0xb90600,0xbb0600,0xbd0600,0xbf0700,0xc00700,0xc20700,0xc40700,0xc60800,0xc80800,0xc90800,0xcb0800,0xcd0900,0xcf0900,0xd10900,0xd20a00,0xd40a00,0xd60a00,0xd80b00,0xda0b00,0xdb0c00,0xdd0c00,0xdf0d00,0xe10d00,0xe30e00,0xe40f00,0xe60f00,0xe81000,0xea1100,0xeb1300,0xed1400,0xee1600,0xf01800,0xf11b00,0xf21d00,0xf32000,0xf52300,0xf62600,0xf62900,0xf72c00,0xf82f00,0xf93200,0xf93500,0xfa3800,0xfa3b00,0xfb3d00,0xfb4000,0xfb4300,0xfc4600,0xfc4900,0xfc4b00,0xfd4e00,0xfd5100,0xfd5300,0xfd5600,0xfd5800,0xfe5b00,0xfe5d00,0xfe5f00,0xfe6200,0xfe6400,0xfe6600,0xfe6800,0xfe6b00,0xfe6d00,0xfe6f00,0xfe7100,0xfe7300,0xfe7500,0xfe7700,0xfe7900,0xfe7c00,0xff7e00,0xff8000,0xff8200,0xff8300,0xff8500,0xff8700,0xff8900,0xff8b00,0xff8d00,0xff8f00,0xff9100,0xff9300,0xff9400,0xff9600,0xff9800,0xff9a00,0xff9c00,0xff9d00,0xff9f00,0xffa100,0xffa300,0xffa401,0xffa601,0xffa801,0xffaa01,0xffab01,0xffad01,0xffaf01,0xffb001,0xffb202,0xffb402,0xffb502,0xffb702,0xffb902,0xffba02,0xffbc03,0xffbd03,0xffbf03,0xffc103,0xffc204,0xffc404,0xffc604,0xffc704,0xffc905,0xffca05,0xffcc05,0xffce06,0xffcf06,0xffd106,0xffd207,0xffd407,0xffd508,0xffd708,0xffd909,0xffda09,0xffdc0a,0xffdd0a,0xffdf0b,0xffe00b,0xffe20c,0xffe30d,0xffe50e,0xffe60f,0xffe810,0xffea11,0xffeb12,0xffed14,0xffee17,0xfff01a,0xfff11e,0xfff324,0xfff42a,0xfff532,0xfff73b,0xfff847,0xfff953,0xfffb62,0xfffb72,0xfffc83,0xfffd95,0xfffea8,0xfffeba,0xfffecc,0xfffede,0xfffeee,0xffffff);
const int u_color_bmy_scheme[256]=int[256](0x000c7c,0x000c7e,0x000d80,0x000d82,0x000e83,0x000e85,0x000e87,0x000f89,0x000f8a,0x00108c,0x00108e,0x00108f,0x001191,0x001192,0x001194,0x001295,0x001297,0x001298,0x00139a,0x00139b,0x00139c,0x00149d,0x00149f,0x0014a0,0x0014a1,0x0015a2,0x0015a3,0x0015a4,0x0015a5,0x0015a5,0x0015a6,0x0015a7,0x0015a8,0x0015a8,0x0015a8,0x0015a9,0x0a15a9,0x1415a9,0x1c15a9,0x2315a9,0x2915a9,0x2e14a9,0x3414a8,0x3913a8,0x3e13a7,0x4212a6,0x4712a5,0x4b11a4,0x4f11a3,0x5310a2,0x5610a1,0x5a0fa0,0x5d0e9f,0x600e9e,0x630d9d,0x660d9c,0x690c9b,0x6c0b9b,0x6f0b9a,0x710a99,0x740a98,0x760997,0x790897,0x7b0896,0x7d0795,0x800795,0x820694,0x840693,0x860593,0x880592,0x8b0592,0x8d0491,0x8f0491,0x910490,0x930390,0x95038f,0x97038f,0x99028e,0x9b028e,0x9d028d,0x9f018d,0xa1018d,0xa2018c,0xa4008c,0xa6008b,0xa8008b,0xaa008a,0xac008a,0xae0089,0xb00089,0xb20088,0xb30088,0xb50087,0xb70087,0xb90087,0xbb0086,0xbd0086,0xbf0085,0xc00085,0xc20084,0xc40084,0xc60083,0xc80083,0xc90082,0xcb0082,0xcd0081,0xcf0081,0xd10080,0xd20080,0xd4007f,0xd6007f,0xd8007e,0xd9007e,0xdb007d,0xdc007c,0xde007c,0xe0007b,0xe1027b,0xe3047a,0xe4067a,0xe60879,0xe70a78,0xe80d78,0xea0f77,0xeb1177,0xed1476,0xee1675,0xef1875,0xf11a74,0xf21c74,0xf31e73,0xf42072,0xf52272,0xf72471,0xf82670,0xf92870,0xfa2a6f,0xfb2c6e,0xfc2e6d,0xfd306d,0xfe326c,0xff346b,0xff366b,0xff386a,0xff3a69,0xff3c68,0xff3e67,0xff4067,0xff4266,0xff4465,0xff4764,0xff4964,0xff4b63,0xff4d62,0xff4f61,0xff5160,0xff535f,0xff565f,0xff585e,0xff5a5d,0xff5c5c,0xff5e5b,0xff605a,0xff6359,0xff6558,0xff6757,0xff6956,0xff6b55,0xff6d54,0xff6f53,0xff7152,0xff7351,0xff7550,0xff774f,0xff794e,0xff7b4d,0xff7d4c,0xff7f4b,0xff814a,0xff8348,0xff8447,0xff8646,0xff8845,0xff8a44,0xff8c42,0xff8d41,0xff8f40,0xff913e,0xff923d,0xff943c,0xff963a,0xff9739,0xff9937,0xff9b36,0xff9c34,0xff9e33,0xffa031,0xffa130,0xffa32e,0xffa42d,0xffa62c,0xffa72b,0xffa92a,0xffaa29,0xffac28,0xffad27,0xffaf26,0xffb025,0xffb224,0xffb324,0xffb523,0xffb622,0xffb722,0xffb921,0xffba20,0xffbc20,0xffbd1f,0xffbe1f,0xffc01f,0xffc11e,0xffc21e,0xffc41d,0xffc51d,0xffc71d,0xffc81d,0xffc91c,0xffcb1c,0xffcc1c,0xffcd1c,0xffcf1c,0xffd01c,0xffd11c,0xffd31c,0xffd41c,0xffd51c,0xffd71c,0xffd81c,0xffd91c,0xffdb1c,0xffdc1d,0xffdd1d,0xffde1d,0xffe01d,0xffe11e,0xffe21e,0xffe41e,0xffe51f,0xffe61f,0xffe81f,0xffe920,0xffea20,0xffec21,0xffed21,0xffee22,0xffef22,0xfff123);
const int u_color_cet_l8_scheme[256]=int[256](0x000e5c,0x000f5e,0x000f60,0x011061,0x011063,0x011165,0x021166,0x031268,0x031269,0x04126b,0x05136c,0x07136e,0x081470,0x091471,0x0b1473,0x0d1574,0x0e1576,0x101677,0x121678,0x13167a,0x15177b,0x17177d,0x19177e,0x1b187f,0x1d1880,0x1f1882,0x211883,0x231984,0x251985,0x271986,0x291988,0x2b1a89,0x2d1a8a,0x2f1a8b,0x311a8c,0x341a8c,0x361a8d,0x391a8e,0x3b1a8f,0x3d1a8f,0x401a90,0x431a90,0x451a91,0x481a91,0x4b1991,0x4e1992,0x501992,0x531892,0x561892,0x591792,0x5b1792,0x5e1692,0x601692,0x631692,0x651592,0x681592,0x6a1492,0x6d1491,0x6f1391,0x711391,0x741291,0x761291,0x781191,0x7a1191,0x7c1090,0x7f1090,0x810f90,0x830f90,0x850e90,0x870e8f,0x890d8f,0x8b0d8f,0x8d0c8e,0x8f0c8e,0x910c8e,0x930b8d,0x950b8d,0x970b8d,0x990a8c,0x9b0a8c,0x9d0a8c,0x9f098b,0xa1098b,0xa3098a,0xa5098a,0xa7098a,0xa90989,0xaa0989,0xac0988,0xae0988,0xb00988,0xb20987,0xb30a87,0xb50a86,0xb70a86,0xb90b85,0xba0b85,0xbc0c85,0xbe0c84,0xbf0d84,0xc10d83,0xc30e83,0xc40e82,0xc60f82,0xc81081,0xc91181,0xcb1180,0xcd1280,0xce137f,0xd0147f,0xd1167e,0xd3177e,0xd4187d,0xd61a7c,0xd71b7c,0xd81d7b,0xda1e7a,0xdb2079,0xdc2179,0xde2378,0xdf2577,0xe02676,0xe12876,0xe22a75,0xe32c74,0xe42d73,0xe62f72,0xe73171,0xe83370,0xe9356f,0xe9366e,0xea386d,0xeb3a6c,0xec3c6b,0xed3e6a,0xee4069,0xee4267,0xef4466,0xf04565,0xf14764,0xf14963,0xf24b62,0xf24d61,0xf34f60,0xf3515f,0xf4525e,0xf4545d,0xf5565c,0xf5585b,0xf65a5a,0xf65c59,0xf65e58,0xf75f57,0xf76157,0xf76356,0xf86555,0xf86754,0xf86953,0xf86a52,0xf86c52,0xf86e51,0xf87050,0xf87250,0xf8744f,0xf8754e,0xf8774e,0xf8794d,0xf87b4c,0xf87d4c,0xf87e4b,0xf8804a,0xf8824a,0xf88349,0xf88548,0xf88748,0xf88847,0xf88a47,0xf88c46,0xf88d45,0xf98f45,0xf99044,0xf99243,0xf99343,0xf99542,0xf99641,0xf99841,0xf99940,0xf99b3f,0xf99c3f,0xfa9e3e,0xfa9f3d,0xfaa03d,0xfaa23c,0xfaa33b,0xfaa53b,0xfba63a,0xfba73a,0xfba939,0xfbaa39,0xfbab38,0xfbad38,0xfcae38,0xfcb037,0xfcb137,0xfcb237,0xfcb437,0xfcb537,0xfcb637,0xfcb837,0xfcb937,0xfcbb37,0xfcbc38,0xfcbd38,0xfcbf38,0xfcc038,0xfcc238,0xfcc339,0xfcc439,0xfcc639,0xfcc73a,0xfcc83a,0xfcca3a,0xfccb3b,0xfccd3b,0xfbce3b,0xfbcf3c,0xfbd13c,0xfbd23d,0xfbd33d,0xfbd53e,0xfbd63e,0xfbd83f,0xfad93f,0xfada40,0xfadc40,0xfadd41,0xfade41,0xf9e042,0xf9e142,0xf9e243,0xf9e444,0xf9e544,0xf8e745,0xf8e845,0xf8e946,0xf8eb47,0xf7ec47,0xf7ed48,0xf7ef48,0xf7f049,0xf6f14a,0xf6f34a,0xf6f44b,0xf5f64c,0xf5f74d,0xf5f84d);
const int u_color_cet_l10_scheme[256]=int[256](0x659a8f,0x669a8f,0x679b8f,0x679b8e,0x689b8e,0x699b8d,0x6a9c8d,0x6a9c8c,0x6b9c8c,0x6c9c8b,0x6c9c8b,0x6d9d8a,0x6e9d8a,0x6f9d89,0x6f9d89,0x709e88,0x719e88,0x729e88,0x729e87,0x739f87,0x749f86,0x759f86,0x759f85,0x769f85,0x77a084,0x78a084,0x78a084,0x79a083,0x7aa083,0x7ba182,0x7ca182,0x7ca181,0x7da181,0x7ea181,0x7fa280,0x80a280,0x81a27f,0x81a27f,0x82a27e,0x83a37e,0x84a37e,0x85a37d,0x86a37d,0x87a37c,0x87a37c,0x88a37c,0x89a47b,0x8aa47b,0x8ba47b,0x8ca47a,0x8da47a,0x8ea479,0x8fa479,0x90a579,0x91a578,0x92a578,0x93a578,0x94a577,0x95a577,0x96a577,0x97a576,0x98a576,0x99a676,0x9aa675,0x9ba675,0x9da675,0x9ea674,0x9fa674,0xa0a674,0xa1a674,0xa3a673,0xa4a673,0xa5a673,0xa6a673,0xa8a673,0xa9a672,0xaaa672,0xaca672,0xada672,0xafa672,0xb0a571,0xb1a571,0xb3a571,0xb4a571,0xb5a571,0xb6a571,0xb7a570,0xb9a570,0xbaa570,0xbba570,0xbca570,0xbda56f,0xbea56f,0xbfa56f,0xc0a56f,0xc1a56f,0xc2a56f,0xc3a56e,0xc4a66e,0xc5a66e,0xc5a66e,0xc6a66e,0xc7a66e,0xc8a66d,0xc8a66d,0xc9a66d,0xcaa66d,0xcba76d,0xcba76d,0xcca76c,0xcca76c,0xcda76c,0xcea76c,0xcea86c,0xcfa86c,0xcfa86b,0xd0a86b,0xd0a86b,0xd0a96b,0xd1a96b,0xd1a96a,0xd2a96a,0xd2aa6a,0xd2aa6a,0xd3aa6a,0xd3aa6a,0xd3ab69,0xd3ab69,0xd3ab69,0xd4ac69,0xd4ac69,0xd4ac69,0xd4ad69,0xd4ad69,0xd5ad69,0xd5ae69,0xd5ae69,0xd5ae69,0xd5af69,0xd5af69,0xd6af69,0xd6b069,0xd6b069,0xd6b069,0xd6b06a,0xd6b16a,0xd6b16a,0xd7b16b,0xd7b26b,0xd7b26b,0xd7b26c,0xd7b36c,0xd7b36c,0xd7b36d,0xd7b46d,0xd7b46e,0xd8b46e,0xd8b56f,0xd8b570,0xd8b570,0xd8b671,0xd8b672,0xd8b672,0xd8b773,0xd8b774,0xd8b774,0xd8b875,0xd8b876,0xd8b877,0xd8b978,0xd8b979,0xd8b979,0xd8ba7a,0xd8ba7b,0xd8ba7c,0xd8bb7d,0xd8bb7e,0xd8bb7f,0xd8bc81,0xd8bc82,0xd8bc83,0xd8bd84,0xd8bd85,0xd8bd86,0xd8be87,0xd8be88,0xd8be89,0xd8bf8a,0xd8bf8b,0xd7bf8d,0xd7c08e,0xd7c08f,0xd7c090,0xd7c191,0xd7c192,0xd7c193,0xd7c294,0xd7c295,0xd7c296,0xd7c297,0xd7c398,0xd7c39a,0xd7c39b,0xd7c49c,0xd7c49d,0xd7c49e,0xd7c59f,0xd7c5a0,0xd7c5a1,0xd7c6a2,0xd7c6a3,0xd7c6a4,0xd7c7a5,0xd7c7a6,0xd7c7a8,0xd7c7a9,0xd7c8aa,0xd6c8ab,0xd6c8ac,0xd6c9ad,0xd6c9ae,0xd6c9af,0xd6cab0,0xd6cab1,0xd6cab2,0xd6cbb3,0xd6cbb4,0xd6cbb6,0xd6cbb7,0xd6ccb8,0xd6ccb9,0xd6ccba,0xd6cdbb,0xd6cdbc,0xd6cdbd,0xd5cebe,0xd5cebf,0xd5cec0,0xd5cfc1,0xd5cfc2,0xd5cfc4,0xd5cfc5,0xd5d0c6,0xd5d0c7,0xd5d0c8,0xd5d1c9,0xd5d1ca,0xd4d1cb,0xd4d2cc,0xd4d2cd,0xd4d2ce,0xd4d3cf,0xd4d3d1,0xd4d3d2,0xd4d3d3,0xd4d4d4);
const int u_color_cet_d7_scheme[256]=int[256](0x1331c1,0x1832c1,0x1c32c0,0x1f33c0,0x2234bf,0x2534bf,0x2735bf,0x2a36be,0x2c37be,0x2e37be,0x3038bd,0x3239bd,0x343abd,0x363abc,0x383bbc,0x393cbc,0x3b3cbb,0x3d3dbb,0x3e3ebb,0x403fba,0x413fba,0x4240b9,0x4441b9,0x4542b9,0x4642b8,0x4843b8,0x4944b8,0x4a44b7,0x4b45b7,0x4d46b7,0x4e47b6,0x4f47b6,0x5048b6,0x5149b5,0x524ab5,0x534ab4,0x544bb4,0x554cb4,0x564db3,0x574db3,0x584eb3,0x594fb2,0x5a50b2,0x5b50b2,0x5c51b1,0x5d52b1,0x5e52b0,0x5f53b0,0x6054b0,0x6155af,0x6155af,0x6256af,0x6357ae,0x6458ae,0x6558ad,0x6659ad,0x665aad,0x675bac,0x685bac,0x695cac,0x695dab,0x6a5eab,0x6b5eab,0x6c5faa,0x6c60aa,0x6d61a9,0x6e61a9,0x6f62a9,0x6f63a8,0x7064a8,0x7164a7,0x7165a7,0x7266a7,0x7367a6,0x7367a6,0x7468a6,0x7569a5,0x756aa5,0x766aa4,0x776ba4,0x776ca4,0x786da3,0x786da3,0x796ea2,0x7a6fa2,0x7a70a2,0x7b70a1,0x7b71a1,0x7c72a0,0x7d73a0,0x7d73a0,0x7e749f,0x7e759f,0x7f769e,0x80769e,0x80779e,0x81789d,0x81799d,0x82799c,0x827a9c,0x837b9c,0x837c9b,0x847c9b,0x847d9a,0x857e9a,0x857f9a,0x868099,0x868099,0x878198,0x878298,0x888398,0x888397,0x898497,0x898596,0x8a8696,0x8a8695,0x8b8795,0x8b8895,0x8c8994,0x8c8a94,0x8d8a93,0x8d8b93,0x8e8c92,0x8e8d92,0x8e8d92,0x8f8e91,0x8f8f91,0x909090,0x919090,0x92918f,0x93928f,0x94928e,0x95938d,0x96938d,0x97948c,0x98958c,0x99958b,0x9a968a,0x9b968a,0x9c9789,0x9d9888,0x9e9888,0x9f9987,0xa09a87,0xa19a86,0xa29b85,0xa29b85,0xa39c84,0xa49d83,0xa59d83,0xa69e82,0xa79f82,0xa89f81,0xa9a080,0xaaa080,0xaba17f,0xaca27e,0xada27e,0xaea37d,0xaea47c,0xafa47c,0xb0a57b,0xb1a67a,0xb2a67a,0xb3a779,0xb4a778,0xb5a878,0xb6a977,0xb6a976,0xb7aa76,0xb8ab75,0xb9ab74,0xbaac73,0xbbad73,0xbcad72,0xbdae71,0xbdae71,0xbeaf70,0xbfb06f,0xc0b06e,0xc1b16e,0xc2b26d,0xc3b26c,0xc3b36b,0xc4b46b,0xc5b46a,0xc6b569,0xc7b668,0xc8b668,0xc8b767,0xc9b866,0xcab865,0xcbb965,0xccba64,0xccba63,0xcdbb62,0xcebc61,0xcfbc60,0xd0bd60,0xd1be5f,0xd1be5e,0xd2bf5d,0xd3c05c,0xd4c05b,0xd5c15a,0xd5c25a,0xd6c259,0xd7c358,0xd8c457,0xd9c456,0xd9c555,0xdac654,0xdbc653,0xdcc752,0xddc851,0xddc850,0xdec94f,0xdfca4e,0xe0ca4d,0xe1cb4c,0xe1cc4b,0xe2cc4a,0xe3cd49,0xe4ce48,0xe4ce47,0xe5cf46,0xe6d044,0xe7d043,0xe8d142,0xe8d241,0xe9d240,0xead33e,0xebd43d,0xebd43c,0xecd53a,0xedd639,0xeed637,0xefd736,0xefd834,0xf0d833,0xf1d931,0xf2da30,0xf2da2e,0xf3db2c,0xf4dc2a,0xf5dd28,0xf5dd26,0xf6de24,0xf7df22,0xf8df1f,0xf8e01d,0xf9e11a,0xfae116,0xfbe213,0xfbe30e,0xfce309);

// All components are in the range [0…1], including hue.
vec3 hsv2rgb(vec3 c){
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}
vec3 transfer_scheme(float gray){
    return hsv2rgb(vec3(gray, 1.0, 1.0));
}
vec3 transfer_scheme(int cat, float gray){
//    return hsv2rgb(vec3(cat, 1.0, gray));
    vec3 gcolor = ORGAN_COLORS[cat - 1];
    return gcolor * gray;
}
//hot to color. H(0~180)
vec3 bright_scheme(float gray){
    return hsv2rgb(vec3((1.0 -gray) * 180.0 / 255.0, 1.0, 1.0));
}

float UpdateOpacityAlpha(int woffset, float alpha){
    vec2 lb = u_opacity[woffset], rb = u_opacity[woffset+3];
    if(alpha < lb.x || alpha > rb.x) return .0;
    vec2 lm = u_opacity[woffset+1], lt =u_opacity[woffset+2];
    vec2 rm = u_opacity[woffset+4], rt =u_opacity[woffset+5];
    float k = (lt.y - lm.y)/(lt.x - lm.x);
    if(alpha < lt.x) alpha*= k*(alpha - lm.x)+lm.y;
    else if(alpha < rt.x) alpha*=rt.y;
    else alpha*= -k *(alpha - rm.x)+rm.y;
    return alpha;
}
int getMaskBit(uint mask_value){
    //check body
    if(mask_value == uint(0)) return ((u_maskbits & uint(1)) == uint(1))? 0:-1;

    int CHECK_BIT = int(-1);
    //check if organ
    for(uint i=uint(0); i<u_organ_num; i++){
        if(((u_maskbits>> uint(i + uint(1))) & uint(1)) == uint(0)) continue;
        uint cbit = (mask_value>> i) & uint(1);
        if(cbit == uint(1)){
            CHECK_BIT = int(i) + 1;
            break;
        }
    }
    return CHECK_BIT;
}

uvec2 Sample(ivec3 pos){
    #ifdef FLIPY
        pos = ivec3(pos.x, uint(u_tex_size.y-float(pos.y)),pos.z);
    #endif
    uint value = imageLoad(srcTex, pos).r;
    //lower part as color, higher part as mask
    return uvec2(value&uint(0xffff), value>>uint(16));
}

//applied contrast, brightness, 12bit->8bit, return value 0-1
float TransferIntensityStepOne(float intensity){
    //max value 4095
//


    intensity = (intensity - u_contrast_low) / (u_contrast_high - u_contrast_low);

    intensity = max(.0, min(1.0, intensity));
    intensity = clamp(intensity + u_brightness*2.0 - 1.0, .0, 1.0);

//    if(intensity_01 > u_contrast_high||intensity_01 < u_contrast_low) intensity_01 = .0;

//    intensity_01 = smoothstep(u_contrast_low, u_contrast_high, intensity_01);

//    intensity_01 = (intensity_01 - u_contrast_low) / (u_contrast_high - u_contrast_low) * u_contrast_level;
//    intensity_01 = clamp(u_brightness+intensity_01 - 0.5, .0, 1.0);
    return intensity;
}
vec3 AdjustContrastBrightness(vec3 color){
    float cr = 1.0 / (u_contrast_high - u_contrast_low);
    color = clamp(cr * (color - vec3(u_contrast_low)), .0, 1.0);
    return clamp(color + u_brightness*2.0 - 1.0, .0, 1.0);
}
vec3 hex2rgb(int hex){
    return vec3(
        (float((hex >> 16) & 0xFF)) / 255.0,
        (float((hex >> 8) & 0xFF)) / 255.0,
        (float((hex) & 0xFF)) / 255.0
    );
}
vec3 TransferColor(float intensity, int ORGAN_BIT){
//    intensity = smoothstep(u_contrast_low, u_contrast_high, intensity);
//    intensity= max(.0, min(1.0, intensity));

//    if(uScheme == 0) fragColor = vec4(vec3(intensity), 1.0);
//    else fragColor = vec4(hsv2rgb(transfer_scheme_hsv((vTexcoord.x > u_contrast_high)? 1.0:intensity)), 1.0);

    vec3 color= vec3(intensity);

    #ifdef COLOR_GRAYSCALE
        color = vec3(intensity);
    #elif defined(COLOR_HSV)
        color = transfer_scheme(intensity);
    #elif defined(COLOR_BRIGHT)
        color = bright_scheme(intensity);
    #elif defined(COLOR_FIRE)
        color = hex2rgb(u_color_fire_scheme[int(intensity * 256.0)]);
    #elif defined(COLOR_BMY)
        color = hex2rgb(u_color_bmy_scheme[int(intensity * 256.0)]);
    #elif defined(COLOR_CET_L08)
        color = hex2rgb(u_color_cet_l8_scheme[int(intensity * 256.0)]);
    #elif defined(COLOR_CET_L10)
        color = hex2rgb(u_color_cet_l10_scheme[int(intensity * 256.0)]);
    #elif defined(COLOR_CET_D7)
        color = hex2rgb(u_color_cet_d7_scheme[int(intensity * 256.0)]);
    #endif

    #ifdef SHOW_ORGANS
        if(u_mask_color && ORGAN_BIT > int(0)) color = transfer_scheme(ORGAN_BIT, intensity);
    #endif
    return AdjustContrastBrightness(color);
}

void main(){
    ivec3 storePos = ivec3(gl_GlobalInvocationID.xyz);
    uvec2 sampled_value = Sample(storePos);
    int ORGAN_BIT = -1;
    #ifdef SHOW_ORGANS
        ORGAN_BIT = getMaskBit(sampled_value.y);
        if(ORGAN_BIT< 0) {imageStore(destTex, storePos, vec4(.0)); return;}
    #endif

    //intensity in 0-1
    float intensity_01 = float(sampled_value.x) * 0.0002442002442002442;
    float alpha = .0;
    for(int i=0; i<u_widget_num; i++)
    if(((u_visible_bits >> i) & 1) == 1) alpha = max(alpha, UpdateOpacityAlpha(6*i, intensity_01));

    imageStore(destTex, storePos, vec4(TransferColor(intensity_01, ORGAN_BIT), alpha));


    //    imageStore(destTex, storePos, vec4(TransferColor(TransferIntensityStepOne(intensity_01), ORGAN_BIT), alpha));
}