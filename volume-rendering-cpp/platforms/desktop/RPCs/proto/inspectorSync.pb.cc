// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/inspectorSync.proto

#include "proto/inspectorSync.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2finspectorSync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GestureOp_proto_2finspectorSync_2eproto;
namespace helmsley {
class VPMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VPMsg> _instance;
} _VPMsg_default_instance_;
class GestureOpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GestureOp> _instance;
} _GestureOp_default_instance_;
class OperationBatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OperationBatch> _instance;
} _OperationBatch_default_instance_;
}  // namespace helmsley
static void InitDefaultsscc_info_GestureOp_proto_2finspectorSync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::helmsley::_GestureOp_default_instance_;
    new (ptr) ::helmsley::GestureOp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::helmsley::GestureOp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GestureOp_proto_2finspectorSync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GestureOp_proto_2finspectorSync_2eproto}, {}};

static void InitDefaultsscc_info_OperationBatch_proto_2finspectorSync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::helmsley::_OperationBatch_default_instance_;
    new (ptr) ::helmsley::OperationBatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::helmsley::OperationBatch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OperationBatch_proto_2finspectorSync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OperationBatch_proto_2finspectorSync_2eproto}, {
      &scc_info_GestureOp_proto_2finspectorSync_2eproto.base,}};

static void InitDefaultsscc_info_VPMsg_proto_2finspectorSync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::helmsley::_VPMsg_default_instance_;
    new (ptr) ::helmsley::VPMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::helmsley::VPMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VPMsg_proto_2finspectorSync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VPMsg_proto_2finspectorSync_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2finspectorSync_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2finspectorSync_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2finspectorSync_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2finspectorSync_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::helmsley::VPMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::helmsley::VPMsg, client_id_),
  PROTOBUF_FIELD_OFFSET(::helmsley::VPMsg, req_type_),
  PROTOBUF_FIELD_OFFSET(::helmsley::VPMsg, volume_pose_type_),
  PROTOBUF_FIELD_OFFSET(::helmsley::VPMsg, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::helmsley::GestureOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::helmsley::GestureOp, gid_),
  PROTOBUF_FIELD_OFFSET(::helmsley::GestureOp, type_),
  PROTOBUF_FIELD_OFFSET(::helmsley::GestureOp, x_),
  PROTOBUF_FIELD_OFFSET(::helmsley::GestureOp, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::helmsley::OperationBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::helmsley::OperationBatch, bid_),
  PROTOBUF_FIELD_OFFSET(::helmsley::OperationBatch, gesture_op_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::helmsley::VPMsg)},
  { 9, -1, sizeof(::helmsley::GestureOp)},
  { 18, -1, sizeof(::helmsley::OperationBatch)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::helmsley::_VPMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::helmsley::_GestureOp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::helmsley::_OperationBatch_default_instance_),
};

const char descriptor_table_protodef_proto_2finspectorSync_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031proto/inspectorSync.proto\022\010helmsley\032\022p"
  "roto/common.proto\"\250\001\n\005VPMsg\022\021\n\tclient_id"
  "\030\001 \001(\005\022#\n\010req_type\030\002 \001(\0162\021.helmsley.ReqT"
  "ype\0220\n\020volume_pose_type\030\003 \001(\0162\026.helmsley"
  ".VPMsg.VPType\022\016\n\006values\030\004 \003(\002\"%\n\006VPType\022"
  "\007\n\003POS\020\000\022\t\n\005SCALE\020\001\022\007\n\003ROT\020\002\"\226\001\n\tGesture"
  "Op\022\013\n\003gid\030\001 \001(\005\022(\n\004type\030\002 \001(\0162\032.helmsley"
  ".GestureOp.OPType\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\""
  "<\n\006OPType\022\016\n\nTOUCH_DOWN\020\000\022\016\n\nTOUCH_MOVE\020"
  "\001\022\t\n\005SCALE\020\002\022\007\n\003PAN\020\003\"F\n\016OperationBatch\022"
  "\013\n\003bid\030\001 \001(\002\022\'\n\ngesture_op\030\002 \003(\0132\023.helms"
  "ley.GestureOp*\033\n\007ReqType\022\007\n\003SET\020\000\022\007\n\003GET"
  "\020\0012\331\001\n\rinspectorSync\022+\n\016startBroadcast\022\010"
  ".Request\032\017.commonResponse\0220\n\014gsVolumePos"
  "e\022\017.helmsley.VPMsg\032\017.commonResponse\0224\n\014s"
  "etGestureOp\022\023.helmsley.GestureOp\032\017.commo"
  "nResponse\0223\n\rgetOperations\022\010.Request\032\030.h"
  "elmsley.OperationBatchb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2finspectorSync_2eproto_deps[1] = {
  &::descriptor_table_proto_2fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2finspectorSync_2eproto_sccs[3] = {
  &scc_info_GestureOp_proto_2finspectorSync_2eproto.base,
  &scc_info_OperationBatch_proto_2finspectorSync_2eproto.base,
  &scc_info_VPMsg_proto_2finspectorSync_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2finspectorSync_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2finspectorSync_2eproto = {
  false, false, descriptor_table_protodef_proto_2finspectorSync_2eproto, "proto/inspectorSync.proto", 710,
  &descriptor_table_proto_2finspectorSync_2eproto_once, descriptor_table_proto_2finspectorSync_2eproto_sccs, descriptor_table_proto_2finspectorSync_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_proto_2finspectorSync_2eproto::offsets,
  file_level_metadata_proto_2finspectorSync_2eproto, 3, file_level_enum_descriptors_proto_2finspectorSync_2eproto, file_level_service_descriptors_proto_2finspectorSync_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2finspectorSync_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2finspectorSync_2eproto)), true);
namespace helmsley {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VPMsg_VPType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2finspectorSync_2eproto);
  return file_level_enum_descriptors_proto_2finspectorSync_2eproto[0];
}
bool VPMsg_VPType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VPMsg_VPType VPMsg::POS;
constexpr VPMsg_VPType VPMsg::SCALE;
constexpr VPMsg_VPType VPMsg::ROT;
constexpr VPMsg_VPType VPMsg::VPType_MIN;
constexpr VPMsg_VPType VPMsg::VPType_MAX;
constexpr int VPMsg::VPType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GestureOp_OPType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2finspectorSync_2eproto);
  return file_level_enum_descriptors_proto_2finspectorSync_2eproto[1];
}
bool GestureOp_OPType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GestureOp_OPType GestureOp::TOUCH_DOWN;
constexpr GestureOp_OPType GestureOp::TOUCH_MOVE;
constexpr GestureOp_OPType GestureOp::SCALE;
constexpr GestureOp_OPType GestureOp::PAN;
constexpr GestureOp_OPType GestureOp::OPType_MIN;
constexpr GestureOp_OPType GestureOp::OPType_MAX;
constexpr int GestureOp::OPType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2finspectorSync_2eproto);
  return file_level_enum_descriptors_proto_2finspectorSync_2eproto[2];
}
bool ReqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void VPMsg::InitAsDefaultInstance() {
}
class VPMsg::_Internal {
 public:
};

VPMsg::VPMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:helmsley.VPMsg)
}
VPMsg::VPMsg(const VPMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_pose_type_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(volume_pose_type_));
  // @@protoc_insertion_point(copy_constructor:helmsley.VPMsg)
}

void VPMsg::SharedCtor() {
  ::memset(&client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_pose_type_) -
      reinterpret_cast<char*>(&client_id_)) + sizeof(volume_pose_type_));
}

VPMsg::~VPMsg() {
  // @@protoc_insertion_point(destructor:helmsley.VPMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VPMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VPMsg::ArenaDtor(void* object) {
  VPMsg* _this = reinterpret_cast< VPMsg* >(object);
  (void)_this;
}
void VPMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VPMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VPMsg& VPMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VPMsg_proto_2finspectorSync_2eproto.base);
  return *internal_default_instance();
}


void VPMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:helmsley.VPMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  ::memset(&client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_pose_type_) -
      reinterpret_cast<char*>(&client_id_)) + sizeof(volume_pose_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VPMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .helmsley.ReqType req_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_req_type(static_cast<::helmsley::ReqType>(val));
        } else goto handle_unusual;
        continue;
      // .helmsley.VPMsg.VPType volume_pose_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_volume_pose_type(static_cast<::helmsley::VPMsg_VPType>(val));
        } else goto handle_unusual;
        continue;
      // repeated float values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VPMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:helmsley.VPMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 client_id = 1;
  if (this->client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_client_id(), target);
  }

  // .helmsley.ReqType req_type = 2;
  if (this->req_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_req_type(), target);
  }

  // .helmsley.VPMsg.VPType volume_pose_type = 3;
  if (this->volume_pose_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_volume_pose_type(), target);
  }

  // repeated float values = 4;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:helmsley.VPMsg)
  return target;
}

size_t VPMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:helmsley.VPMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 client_id = 1;
  if (this->client_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_client_id());
  }

  // .helmsley.ReqType req_type = 2;
  if (this->req_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_req_type());
  }

  // .helmsley.VPMsg.VPType volume_pose_type = 3;
  if (this->volume_pose_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_volume_pose_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VPMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:helmsley.VPMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const VPMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VPMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:helmsley.VPMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:helmsley.VPMsg)
    MergeFrom(*source);
  }
}

void VPMsg::MergeFrom(const VPMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:helmsley.VPMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
  if (from.req_type() != 0) {
    _internal_set_req_type(from._internal_req_type());
  }
  if (from.volume_pose_type() != 0) {
    _internal_set_volume_pose_type(from._internal_volume_pose_type());
  }
}

void VPMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:helmsley.VPMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VPMsg::CopyFrom(const VPMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:helmsley.VPMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VPMsg::IsInitialized() const {
  return true;
}

void VPMsg::InternalSwap(VPMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VPMsg, volume_pose_type_)
      + sizeof(VPMsg::volume_pose_type_)
      - PROTOBUF_FIELD_OFFSET(VPMsg, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VPMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GestureOp::InitAsDefaultInstance() {
}
class GestureOp::_Internal {
 public:
};

GestureOp::GestureOp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:helmsley.GestureOp)
}
GestureOp::GestureOp(const GestureOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gid_, &from.gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&gid_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:helmsley.GestureOp)
}

void GestureOp::SharedCtor() {
  ::memset(&gid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&gid_)) + sizeof(y_));
}

GestureOp::~GestureOp() {
  // @@protoc_insertion_point(destructor:helmsley.GestureOp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GestureOp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GestureOp::ArenaDtor(void* object) {
  GestureOp* _this = reinterpret_cast< GestureOp* >(object);
  (void)_this;
}
void GestureOp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GestureOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GestureOp& GestureOp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GestureOp_proto_2finspectorSync_2eproto.base);
  return *internal_default_instance();
}


void GestureOp::Clear() {
// @@protoc_insertion_point(message_clear_start:helmsley.GestureOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&gid_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GestureOp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .helmsley.GestureOp.OPType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::helmsley::GestureOp_OPType>(val));
        } else goto handle_unusual;
        continue;
      // float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GestureOp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:helmsley.GestureOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gid = 1;
  if (this->gid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gid(), target);
  }

  // .helmsley.GestureOp.OPType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // float x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // float y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:helmsley.GestureOp)
  return target;
}

size_t GestureOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:helmsley.GestureOp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gid = 1;
  if (this->gid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gid());
  }

  // .helmsley.GestureOp.OPType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // float x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GestureOp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:helmsley.GestureOp)
  GOOGLE_DCHECK_NE(&from, this);
  const GestureOp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GestureOp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:helmsley.GestureOp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:helmsley.GestureOp)
    MergeFrom(*source);
  }
}

void GestureOp::MergeFrom(const GestureOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:helmsley.GestureOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gid() != 0) {
    _internal_set_gid(from._internal_gid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void GestureOp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:helmsley.GestureOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GestureOp::CopyFrom(const GestureOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:helmsley.GestureOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GestureOp::IsInitialized() const {
  return true;
}

void GestureOp::InternalSwap(GestureOp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GestureOp, y_)
      + sizeof(GestureOp::y_)
      - PROTOBUF_FIELD_OFFSET(GestureOp, gid_)>(
          reinterpret_cast<char*>(&gid_),
          reinterpret_cast<char*>(&other->gid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GestureOp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OperationBatch::InitAsDefaultInstance() {
}
class OperationBatch::_Internal {
 public:
};

OperationBatch::OperationBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gesture_op_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:helmsley.OperationBatch)
}
OperationBatch::OperationBatch(const OperationBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gesture_op_(from.gesture_op_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bid_ = from.bid_;
  // @@protoc_insertion_point(copy_constructor:helmsley.OperationBatch)
}

void OperationBatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OperationBatch_proto_2finspectorSync_2eproto.base);
  bid_ = 0;
}

OperationBatch::~OperationBatch() {
  // @@protoc_insertion_point(destructor:helmsley.OperationBatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OperationBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OperationBatch::ArenaDtor(void* object) {
  OperationBatch* _this = reinterpret_cast< OperationBatch* >(object);
  (void)_this;
}
void OperationBatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OperationBatch& OperationBatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OperationBatch_proto_2finspectorSync_2eproto.base);
  return *internal_default_instance();
}


void OperationBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:helmsley.OperationBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gesture_op_.Clear();
  bid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationBatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float bid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          bid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .helmsley.GestureOp gesture_op = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gesture_op(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationBatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:helmsley.OperationBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float bid = 1;
  if (!(this->bid() <= 0 && this->bid() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_bid(), target);
  }

  // repeated .helmsley.GestureOp gesture_op = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gesture_op_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_gesture_op(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:helmsley.OperationBatch)
  return target;
}

size_t OperationBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:helmsley.OperationBatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .helmsley.GestureOp gesture_op = 2;
  total_size += 1UL * this->_internal_gesture_op_size();
  for (const auto& msg : this->gesture_op_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float bid = 1;
  if (!(this->bid() <= 0 && this->bid() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperationBatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:helmsley.OperationBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationBatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OperationBatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:helmsley.OperationBatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:helmsley.OperationBatch)
    MergeFrom(*source);
  }
}

void OperationBatch::MergeFrom(const OperationBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:helmsley.OperationBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gesture_op_.MergeFrom(from.gesture_op_);
  if (!(from.bid() <= 0 && from.bid() >= 0)) {
    _internal_set_bid(from._internal_bid());
  }
}

void OperationBatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:helmsley.OperationBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationBatch::CopyFrom(const OperationBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:helmsley.OperationBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationBatch::IsInitialized() const {
  return true;
}

void OperationBatch::InternalSwap(OperationBatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gesture_op_.InternalSwap(&other->gesture_op_);
  swap(bid_, other->bid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationBatch::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace helmsley
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::helmsley::VPMsg* Arena::CreateMaybeMessage< ::helmsley::VPMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::helmsley::VPMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::helmsley::GestureOp* Arena::CreateMaybeMessage< ::helmsley::GestureOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::helmsley::GestureOp >(arena);
}
template<> PROTOBUF_NOINLINE ::helmsley::OperationBatch* Arena::CreateMaybeMessage< ::helmsley::OperationBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::helmsley::OperationBatch >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
