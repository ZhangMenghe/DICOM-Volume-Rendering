// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/inspectorSync.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2finspectorSync_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2finspectorSync_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2finspectorSync_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2finspectorSync_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2finspectorSync_2eproto;
namespace helmsley {
class GestureOp;
class GestureOpDefaultTypeInternal;
extern GestureOpDefaultTypeInternal _GestureOp_default_instance_;
class OperationBatch;
class OperationBatchDefaultTypeInternal;
extern OperationBatchDefaultTypeInternal _OperationBatch_default_instance_;
class VPMsg;
class VPMsgDefaultTypeInternal;
extern VPMsgDefaultTypeInternal _VPMsg_default_instance_;
}  // namespace helmsley
PROTOBUF_NAMESPACE_OPEN
template<> ::helmsley::GestureOp* Arena::CreateMaybeMessage<::helmsley::GestureOp>(Arena*);
template<> ::helmsley::OperationBatch* Arena::CreateMaybeMessage<::helmsley::OperationBatch>(Arena*);
template<> ::helmsley::VPMsg* Arena::CreateMaybeMessage<::helmsley::VPMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace helmsley {

enum VPMsg_VPType : int {
  VPMsg_VPType_POS = 0,
  VPMsg_VPType_SCALE = 1,
  VPMsg_VPType_ROT = 2,
  VPMsg_VPType_VPMsg_VPType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VPMsg_VPType_VPMsg_VPType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VPMsg_VPType_IsValid(int value);
constexpr VPMsg_VPType VPMsg_VPType_VPType_MIN = VPMsg_VPType_POS;
constexpr VPMsg_VPType VPMsg_VPType_VPType_MAX = VPMsg_VPType_ROT;
constexpr int VPMsg_VPType_VPType_ARRAYSIZE = VPMsg_VPType_VPType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VPMsg_VPType_descriptor();
template<typename T>
inline const std::string& VPMsg_VPType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VPMsg_VPType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VPMsg_VPType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VPMsg_VPType_descriptor(), enum_t_value);
}
inline bool VPMsg_VPType_Parse(
    const std::string& name, VPMsg_VPType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VPMsg_VPType>(
    VPMsg_VPType_descriptor(), name, value);
}
enum GestureOp_OPType : int {
  GestureOp_OPType_TOUCH_DOWN = 0,
  GestureOp_OPType_TOUCH_MOVE = 1,
  GestureOp_OPType_SCALE = 2,
  GestureOp_OPType_PAN = 3,
  GestureOp_OPType_GestureOp_OPType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GestureOp_OPType_GestureOp_OPType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GestureOp_OPType_IsValid(int value);
constexpr GestureOp_OPType GestureOp_OPType_OPType_MIN = GestureOp_OPType_TOUCH_DOWN;
constexpr GestureOp_OPType GestureOp_OPType_OPType_MAX = GestureOp_OPType_PAN;
constexpr int GestureOp_OPType_OPType_ARRAYSIZE = GestureOp_OPType_OPType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GestureOp_OPType_descriptor();
template<typename T>
inline const std::string& GestureOp_OPType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GestureOp_OPType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GestureOp_OPType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GestureOp_OPType_descriptor(), enum_t_value);
}
inline bool GestureOp_OPType_Parse(
    const std::string& name, GestureOp_OPType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GestureOp_OPType>(
    GestureOp_OPType_descriptor(), name, value);
}
enum ReqType : int {
  SET = 0,
  GET = 1,
  ReqType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReqType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReqType_IsValid(int value);
constexpr ReqType ReqType_MIN = SET;
constexpr ReqType ReqType_MAX = GET;
constexpr int ReqType_ARRAYSIZE = ReqType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqType_descriptor();
template<typename T>
inline const std::string& ReqType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReqType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReqType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReqType_descriptor(), enum_t_value);
}
inline bool ReqType_Parse(
    const std::string& name, ReqType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReqType>(
    ReqType_descriptor(), name, value);
}
// ===================================================================

class VPMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helmsley.VPMsg) */ {
 public:
  inline VPMsg() : VPMsg(nullptr) {};
  virtual ~VPMsg();

  VPMsg(const VPMsg& from);
  VPMsg(VPMsg&& from) noexcept
    : VPMsg() {
    *this = ::std::move(from);
  }

  inline VPMsg& operator=(const VPMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline VPMsg& operator=(VPMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VPMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VPMsg* internal_default_instance() {
    return reinterpret_cast<const VPMsg*>(
               &_VPMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VPMsg& a, VPMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(VPMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VPMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VPMsg* New() const final {
    return CreateMaybeMessage<VPMsg>(nullptr);
  }

  VPMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VPMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VPMsg& from);
  void MergeFrom(const VPMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VPMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helmsley.VPMsg";
  }
  protected:
  explicit VPMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2finspectorSync_2eproto);
    return ::descriptor_table_proto_2finspectorSync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef VPMsg_VPType VPType;
  static constexpr VPType POS =
    VPMsg_VPType_POS;
  static constexpr VPType SCALE =
    VPMsg_VPType_SCALE;
  static constexpr VPType ROT =
    VPMsg_VPType_ROT;
  static inline bool VPType_IsValid(int value) {
    return VPMsg_VPType_IsValid(value);
  }
  static constexpr VPType VPType_MIN =
    VPMsg_VPType_VPType_MIN;
  static constexpr VPType VPType_MAX =
    VPMsg_VPType_VPType_MAX;
  static constexpr int VPType_ARRAYSIZE =
    VPMsg_VPType_VPType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VPType_descriptor() {
    return VPMsg_VPType_descriptor();
  }
  template<typename T>
  static inline const std::string& VPType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VPType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VPType_Name.");
    return VPMsg_VPType_Name(enum_t_value);
  }
  static inline bool VPType_Parse(const std::string& name,
      VPType* value) {
    return VPMsg_VPType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 4,
    kClientIdFieldNumber = 1,
    kReqTypeFieldNumber = 2,
    kVolumePoseTypeFieldNumber = 3,
  };
  // repeated float values = 4;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // int32 client_id = 1;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .helmsley.ReqType req_type = 2;
  void clear_req_type();
  ::helmsley::ReqType req_type() const;
  void set_req_type(::helmsley::ReqType value);
  private:
  ::helmsley::ReqType _internal_req_type() const;
  void _internal_set_req_type(::helmsley::ReqType value);
  public:

  // .helmsley.VPMsg.VPType volume_pose_type = 3;
  void clear_volume_pose_type();
  ::helmsley::VPMsg_VPType volume_pose_type() const;
  void set_volume_pose_type(::helmsley::VPMsg_VPType value);
  private:
  ::helmsley::VPMsg_VPType _internal_volume_pose_type() const;
  void _internal_set_volume_pose_type(::helmsley::VPMsg_VPType value);
  public:

  // @@protoc_insertion_point(class_scope:helmsley.VPMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  int req_type_;
  int volume_pose_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2finspectorSync_2eproto;
};
// -------------------------------------------------------------------

class GestureOp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helmsley.GestureOp) */ {
 public:
  inline GestureOp() : GestureOp(nullptr) {};
  virtual ~GestureOp();

  GestureOp(const GestureOp& from);
  GestureOp(GestureOp&& from) noexcept
    : GestureOp() {
    *this = ::std::move(from);
  }

  inline GestureOp& operator=(const GestureOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GestureOp& operator=(GestureOp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GestureOp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GestureOp* internal_default_instance() {
    return reinterpret_cast<const GestureOp*>(
               &_GestureOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GestureOp& a, GestureOp& b) {
    a.Swap(&b);
  }
  inline void Swap(GestureOp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GestureOp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GestureOp* New() const final {
    return CreateMaybeMessage<GestureOp>(nullptr);
  }

  GestureOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GestureOp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GestureOp& from);
  void MergeFrom(const GestureOp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GestureOp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helmsley.GestureOp";
  }
  protected:
  explicit GestureOp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2finspectorSync_2eproto);
    return ::descriptor_table_proto_2finspectorSync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GestureOp_OPType OPType;
  static constexpr OPType TOUCH_DOWN =
    GestureOp_OPType_TOUCH_DOWN;
  static constexpr OPType TOUCH_MOVE =
    GestureOp_OPType_TOUCH_MOVE;
  static constexpr OPType SCALE =
    GestureOp_OPType_SCALE;
  static constexpr OPType PAN =
    GestureOp_OPType_PAN;
  static inline bool OPType_IsValid(int value) {
    return GestureOp_OPType_IsValid(value);
  }
  static constexpr OPType OPType_MIN =
    GestureOp_OPType_OPType_MIN;
  static constexpr OPType OPType_MAX =
    GestureOp_OPType_OPType_MAX;
  static constexpr int OPType_ARRAYSIZE =
    GestureOp_OPType_OPType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OPType_descriptor() {
    return GestureOp_OPType_descriptor();
  }
  template<typename T>
  static inline const std::string& OPType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OPType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OPType_Name.");
    return GestureOp_OPType_Name(enum_t_value);
  }
  static inline bool OPType_Parse(const std::string& name,
      OPType* value) {
    return GestureOp_OPType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGidFieldNumber = 1,
    kTypeFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
  };
  // int32 gid = 1;
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::int32 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .helmsley.GestureOp.OPType type = 2;
  void clear_type();
  ::helmsley::GestureOp_OPType type() const;
  void set_type(::helmsley::GestureOp_OPType value);
  private:
  ::helmsley::GestureOp_OPType _internal_type() const;
  void _internal_set_type(::helmsley::GestureOp_OPType value);
  public:

  // float x = 3;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 4;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:helmsley.GestureOp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 gid_;
  int type_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2finspectorSync_2eproto;
};
// -------------------------------------------------------------------

class OperationBatch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helmsley.OperationBatch) */ {
 public:
  inline OperationBatch() : OperationBatch(nullptr) {};
  virtual ~OperationBatch();

  OperationBatch(const OperationBatch& from);
  OperationBatch(OperationBatch&& from) noexcept
    : OperationBatch() {
    *this = ::std::move(from);
  }

  inline OperationBatch& operator=(const OperationBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationBatch& operator=(OperationBatch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperationBatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperationBatch* internal_default_instance() {
    return reinterpret_cast<const OperationBatch*>(
               &_OperationBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OperationBatch& a, OperationBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationBatch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationBatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationBatch* New() const final {
    return CreateMaybeMessage<OperationBatch>(nullptr);
  }

  OperationBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationBatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperationBatch& from);
  void MergeFrom(const OperationBatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationBatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helmsley.OperationBatch";
  }
  protected:
  explicit OperationBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2finspectorSync_2eproto);
    return ::descriptor_table_proto_2finspectorSync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGestureOpFieldNumber = 2,
    kBidFieldNumber = 1,
  };
  // repeated .helmsley.GestureOp gesture_op = 2;
  int gesture_op_size() const;
  private:
  int _internal_gesture_op_size() const;
  public:
  void clear_gesture_op();
  ::helmsley::GestureOp* mutable_gesture_op(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helmsley::GestureOp >*
      mutable_gesture_op();
  private:
  const ::helmsley::GestureOp& _internal_gesture_op(int index) const;
  ::helmsley::GestureOp* _internal_add_gesture_op();
  public:
  const ::helmsley::GestureOp& gesture_op(int index) const;
  ::helmsley::GestureOp* add_gesture_op();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helmsley::GestureOp >&
      gesture_op() const;

  // float bid = 1;
  void clear_bid();
  float bid() const;
  void set_bid(float value);
  private:
  float _internal_bid() const;
  void _internal_set_bid(float value);
  public:

  // @@protoc_insertion_point(class_scope:helmsley.OperationBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helmsley::GestureOp > gesture_op_;
  float bid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2finspectorSync_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VPMsg

// int32 client_id = 1;
inline void VPMsg::clear_client_id() {
  client_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VPMsg::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VPMsg::client_id() const {
  // @@protoc_insertion_point(field_get:helmsley.VPMsg.client_id)
  return _internal_client_id();
}
inline void VPMsg::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_id_ = value;
}
inline void VPMsg::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:helmsley.VPMsg.client_id)
}

// .helmsley.ReqType req_type = 2;
inline void VPMsg::clear_req_type() {
  req_type_ = 0;
}
inline ::helmsley::ReqType VPMsg::_internal_req_type() const {
  return static_cast< ::helmsley::ReqType >(req_type_);
}
inline ::helmsley::ReqType VPMsg::req_type() const {
  // @@protoc_insertion_point(field_get:helmsley.VPMsg.req_type)
  return _internal_req_type();
}
inline void VPMsg::_internal_set_req_type(::helmsley::ReqType value) {
  
  req_type_ = value;
}
inline void VPMsg::set_req_type(::helmsley::ReqType value) {
  _internal_set_req_type(value);
  // @@protoc_insertion_point(field_set:helmsley.VPMsg.req_type)
}

// .helmsley.VPMsg.VPType volume_pose_type = 3;
inline void VPMsg::clear_volume_pose_type() {
  volume_pose_type_ = 0;
}
inline ::helmsley::VPMsg_VPType VPMsg::_internal_volume_pose_type() const {
  return static_cast< ::helmsley::VPMsg_VPType >(volume_pose_type_);
}
inline ::helmsley::VPMsg_VPType VPMsg::volume_pose_type() const {
  // @@protoc_insertion_point(field_get:helmsley.VPMsg.volume_pose_type)
  return _internal_volume_pose_type();
}
inline void VPMsg::_internal_set_volume_pose_type(::helmsley::VPMsg_VPType value) {
  
  volume_pose_type_ = value;
}
inline void VPMsg::set_volume_pose_type(::helmsley::VPMsg_VPType value) {
  _internal_set_volume_pose_type(value);
  // @@protoc_insertion_point(field_set:helmsley.VPMsg.volume_pose_type)
}

// repeated float values = 4;
inline int VPMsg::_internal_values_size() const {
  return values_.size();
}
inline int VPMsg::values_size() const {
  return _internal_values_size();
}
inline void VPMsg::clear_values() {
  values_.Clear();
}
inline float VPMsg::_internal_values(int index) const {
  return values_.Get(index);
}
inline float VPMsg::values(int index) const {
  // @@protoc_insertion_point(field_get:helmsley.VPMsg.values)
  return _internal_values(index);
}
inline void VPMsg::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:helmsley.VPMsg.values)
}
inline void VPMsg::_internal_add_values(float value) {
  values_.Add(value);
}
inline void VPMsg::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:helmsley.VPMsg.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VPMsg::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VPMsg::values() const {
  // @@protoc_insertion_point(field_list:helmsley.VPMsg.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VPMsg::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VPMsg::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:helmsley.VPMsg.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// GestureOp

// int32 gid = 1;
inline void GestureOp::clear_gid() {
  gid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GestureOp::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GestureOp::gid() const {
  // @@protoc_insertion_point(field_get:helmsley.GestureOp.gid)
  return _internal_gid();
}
inline void GestureOp::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gid_ = value;
}
inline void GestureOp::set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:helmsley.GestureOp.gid)
}

// .helmsley.GestureOp.OPType type = 2;
inline void GestureOp::clear_type() {
  type_ = 0;
}
inline ::helmsley::GestureOp_OPType GestureOp::_internal_type() const {
  return static_cast< ::helmsley::GestureOp_OPType >(type_);
}
inline ::helmsley::GestureOp_OPType GestureOp::type() const {
  // @@protoc_insertion_point(field_get:helmsley.GestureOp.type)
  return _internal_type();
}
inline void GestureOp::_internal_set_type(::helmsley::GestureOp_OPType value) {
  
  type_ = value;
}
inline void GestureOp::set_type(::helmsley::GestureOp_OPType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:helmsley.GestureOp.type)
}

// float x = 3;
inline void GestureOp::clear_x() {
  x_ = 0;
}
inline float GestureOp::_internal_x() const {
  return x_;
}
inline float GestureOp::x() const {
  // @@protoc_insertion_point(field_get:helmsley.GestureOp.x)
  return _internal_x();
}
inline void GestureOp::_internal_set_x(float value) {
  
  x_ = value;
}
inline void GestureOp::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:helmsley.GestureOp.x)
}

// float y = 4;
inline void GestureOp::clear_y() {
  y_ = 0;
}
inline float GestureOp::_internal_y() const {
  return y_;
}
inline float GestureOp::y() const {
  // @@protoc_insertion_point(field_get:helmsley.GestureOp.y)
  return _internal_y();
}
inline void GestureOp::_internal_set_y(float value) {
  
  y_ = value;
}
inline void GestureOp::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:helmsley.GestureOp.y)
}

// -------------------------------------------------------------------

// OperationBatch

// float bid = 1;
inline void OperationBatch::clear_bid() {
  bid_ = 0;
}
inline float OperationBatch::_internal_bid() const {
  return bid_;
}
inline float OperationBatch::bid() const {
  // @@protoc_insertion_point(field_get:helmsley.OperationBatch.bid)
  return _internal_bid();
}
inline void OperationBatch::_internal_set_bid(float value) {
  
  bid_ = value;
}
inline void OperationBatch::set_bid(float value) {
  _internal_set_bid(value);
  // @@protoc_insertion_point(field_set:helmsley.OperationBatch.bid)
}

// repeated .helmsley.GestureOp gesture_op = 2;
inline int OperationBatch::_internal_gesture_op_size() const {
  return gesture_op_.size();
}
inline int OperationBatch::gesture_op_size() const {
  return _internal_gesture_op_size();
}
inline void OperationBatch::clear_gesture_op() {
  gesture_op_.Clear();
}
inline ::helmsley::GestureOp* OperationBatch::mutable_gesture_op(int index) {
  // @@protoc_insertion_point(field_mutable:helmsley.OperationBatch.gesture_op)
  return gesture_op_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helmsley::GestureOp >*
OperationBatch::mutable_gesture_op() {
  // @@protoc_insertion_point(field_mutable_list:helmsley.OperationBatch.gesture_op)
  return &gesture_op_;
}
inline const ::helmsley::GestureOp& OperationBatch::_internal_gesture_op(int index) const {
  return gesture_op_.Get(index);
}
inline const ::helmsley::GestureOp& OperationBatch::gesture_op(int index) const {
  // @@protoc_insertion_point(field_get:helmsley.OperationBatch.gesture_op)
  return _internal_gesture_op(index);
}
inline ::helmsley::GestureOp* OperationBatch::_internal_add_gesture_op() {
  return gesture_op_.Add();
}
inline ::helmsley::GestureOp* OperationBatch::add_gesture_op() {
  // @@protoc_insertion_point(field_add:helmsley.OperationBatch.gesture_op)
  return _internal_add_gesture_op();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helmsley::GestureOp >&
OperationBatch::gesture_op() const {
  // @@protoc_insertion_point(field_list:helmsley.OperationBatch.gesture_op)
  return gesture_op_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace helmsley

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::helmsley::VPMsg_VPType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::helmsley::VPMsg_VPType>() {
  return ::helmsley::VPMsg_VPType_descriptor();
}
template <> struct is_proto_enum< ::helmsley::GestureOp_OPType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::helmsley::GestureOp_OPType>() {
  return ::helmsley::GestureOp_OPType_descriptor();
}
template <> struct is_proto_enum< ::helmsley::ReqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::helmsley::ReqType>() {
  return ::helmsley::ReqType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2finspectorSync_2eproto
